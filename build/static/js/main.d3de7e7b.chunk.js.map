{"version":3,"sources":["styles/images/logo.png","components/Header.jsx","resources/api.js","components/Campaign.jsx","components/CampaignList.js","components/library/Loader.jsx","components/CampaignContainer.js","components/library/Tab.jsx","components/library/Tabs.jsx","components/Layout.jsx","RouteConfig.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","role","aria-level","src","logo","alt","width","height","fetchCampaigns","offset","limit","a","async","url","fetch","response","json","console","error","Campaign","data","this","props","aria-describedby","name","Component","CampaignList","length","map","campaign","index","key","_id","defaultProps","Loader","aria-label","CampaignContainer","state","campaigns","loading","refreshResults","bind","campaignContent","result","push","setState","showResults","Tab","handleClick","label","onClick","activeTab","aria-selected","area-label","Tabs","children","tab","child","Layout","status","RouteConfig","history","createBrowserHistory","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3de7e7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c33efd75.png\";","import React from \"react\";\nimport logo from \"../styles/images/logo.png\";\n\nconst Header = () => (\n  <div className=\"flex-container\" role=\"heading\" aria-level=\"1\">\n    <header>\n      <nav>\n        <img src={logo} alt=\"Logo\" width=\"48\" height=\"48\" />\n        <span>Bluestacks</span>\n      </nav>\n    </header>\n  </div>\n);\n\nexport default Header;\n","export const CAMPAIGNS = `api/campaigns`;\n\nexport const fetchCampaigns = async (offset, limit) => {\n  const url = `${CAMPAIGNS}`;\n\n  try {\n    const response = await fetch(url);\n\n    return await response.json();\n  } catch (e) {\n    console.error(e);\n  }\n\n  return null;\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Campaign extends Component {\n  static propTypes = {\n    data: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { data } = this.props;\n\n    return (\n      <div className=\"gif-container\" role=\"img\" aria-describedby={`Campaign Name: ${data.name}`}>\n        {data.name}\n      </div>\n    );\n  }\n}\n\nexport default Campaign;\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Campaign from \"./Campaign\";\n\nclass CampaignList extends Component {\n  static propTypes = {\n    data: PropTypes.array\n  };\n\n  static defaultProps = {\n    data: []\n  };\n\n  render() {\n    const { data } = this.props;\n    const hasGifs = !!data && data.length !== 0;\n\n    if (!hasGifs) return null;\n\n    return (\n      <>\n        {/* <Grid\n          rows={data}\n          columns={[\n            { name: \"Date\", title: \"Date\" },\n            { name: \"Campaign\", title: \"Campaign\" },\n            { name: \"View\", title: \"View\" },\n            { name: \"Actions\", title: \"Actions\" }\n          ]}\n        >\n          <Table />\n          <TableHeaderRow />\n        </Grid> */}\n        {data.map((campaign, index) => (\n          <Campaign key={`${index}.${campaign._id}`} data={campaign} />\n        ))}\n      </>\n    );\n  }\n}\n\nexport default CampaignList;\n","import React from \"react\";\n\nconst LOADER = `https://media.giphy.com/media/8F0rJxdTt9xS/giphy.gif`;\n\nconst Loader = () => {\n  return (\n    <div aria-label=\"loading...\">\n      <img width=\"200\" height=\"200\" alt=\"loading...\" src={LOADER} />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport { fetchCampaigns } from \"../resources/api\";\nimport CampaignList from \"./CampaignList\";\nimport Loader from \"./library/Loader\";\n\nclass CampaignContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.refreshResults = this.refreshResults.bind(this);\n  }\n\n  state = {\n    campaigns: [],\n    limit: 20,\n    offset: 0,\n    loading: false\n  };\n\n  componentDidMount() {\n    this.refreshResults();\n  }\n\n  async refreshResults(offset = 0) {\n    const { campaigns, limit } = this.state;\n\n    let campaignContent = campaigns;\n\n    try {\n      const result = await fetchCampaigns(offset, limit);\n\n      if (!!result) {\n        result.map(campaign => {\n          return campaignContent.push(campaign);\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.setState({\n        campaigns: campaignContent,\n        offset: offset,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    const { campaigns, loading } = this.state;\n\n    const hasResults = !!campaigns && campaigns.length > 0;\n    const showResults = hasResults && !loading;\n\n    return (\n      <div className=\"trending\">\n        {loading && <Loader />}\n\n        {showResults && (\n          <div className=\"campaigns\">\n            <CampaignList data={campaigns} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CampaignContainer;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Tab extends Component {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { label, onClick } = this.props;\n    onClick(label);\n  }\n\n  render() {\n    const { activeTab, label } = this.props;\n\n    let className = \"tab-list-item\";\n\n    if (activeTab === label) {\n      className += \" active\";\n    }\n\n    return (\n      <li className={className} onClick={this.handleClick} role=\"tab\" aria-selected={activeTab ? \"true\" : \"false\"} area-label={label}>\n        {label}\n      </li>\n    );\n  }\n}\n\nexport default Tab;\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Tab from \"./Tab\";\n\nclass Tabs extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  state = {\n    activeTab: this.props.children[0].props.label\n  };\n\n  handleClick(tab) {\n    this.setState({ activeTab: tab });\n  }\n\n  render() {\n    const {\n      props: { children },\n      state: { activeTab }\n    } = this;\n\n    return (\n      <div className=\"tabs\">\n        <ol className=\"tab-list\">\n          {children.map(child => {\n            const { label } = child.props;\n\n            return (\n              <Tab\n                activeTab={activeTab}\n                key={label}\n                label={label}\n                onClick={this.handleClick}\n              />\n            );\n          })}\n        </ol>\n        <div className=\"tab-content\">\n          {children.map(child => {\n            if (child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tabs;\n","import React from \"react\";\nimport CampaignContainer from \"./CampaignContainer.js\";\nimport Tabs from \"./library/Tabs\";\n\nconst Layout = () => {\n  return (\n    <div className=\"flex-container\">\n      <Tabs>\n        <div label=\"Upcoming Campaigns\">\n          <CampaignContainer status=\"1\" />\n        </div>\n        <div label=\"Live Campaigns\">\n          <CampaignContainer status=\"2\" />\n        </div>\n        <div label=\"Past Campaigns\">\n          <CampaignContainer status=\"3\" />\n        </div>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Layout;\n","import { createBrowserHistory } from \"history\";\nimport React, { Component } from \"react\";\nimport { Route, Router } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Layout from \"./components/Layout\";\n\nclass RouteConfig extends Component {\n  render() {\n    return (\n      <Router history={createBrowserHistory()}>\n        <Header />\n\n        {/* COMMON ROUTES */}\n        <Route exact path=\"/\" component={Layout} />\n\n        {/* <Route path=\"*\" component={NotFoundPage} /> */}\n      </Router>\n    );\n  }\n}\n\nexport default RouteConfig;\n","import React from \"react\";\nimport RouteConfig from \"./RouteConfig\";\n\nfunction App() {\n  return <RouteConfig />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}